##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: BASE ELEVATOR MK2

slots:
    core:
        class: CoreUnit
    telemeter:
        class: TelemeterUnit
handlers:
    unit:
        start:
            lua: |
                  local PhysicsHelper = require("autoconf/custom/Libs/PhysicsHelper")
                  local VerticalPosition = require("autoconf/custom/Libs/VerticalPosition")
                  local FlatOrientation = require("autoconf/custom/Libs/FlatOrientation")
                  local AutoPilot = require("autoconf/custom/Libs/AutoPilot")
                  --container:
                  -- class: FuelContainer
                  -- select: all
                  FreeManeuver = -1
                  Brake = 0
                  Landing = 1
                  CapSpeed = 0
                  Hover = 0
                  Turn = 0
                  Yaw = 0
                  Pitch = 0
                  goToTarget = 0
                  startingPosition = vec3(0,0,0)

                  Mode = "FreeHeight"
                  
                  totalMass = 0--self.core.getConstructMass()
                  local elements = core.getElementList()
                  local i = 1
                    while elements[i] do
                      totalMass = totalMass + core.getElementMass(elements[i])
                      i = i + 1
                    end
                
                  --for i=1,container_size do totalMass = totalMass + container[i].getItemsMass() end

                  local engines = {
                    vertical = self.vertical,
                    amountVertical = 0,

                    horizontal = self.horizontal,
                    amountHorizontal = 0,

                    aileronV = self.aileronV,
                    amountAileronV = 0,
                    
                    aileronH = self.aileronH,
                    amountAileronH = 0,
                  }

                  physicsHelper = PhysicsHelper.new(self.core,self.unit, totalMass, engines)
                  
                  startingPosition = physicsHelper.physics.position.world
                  local targetPosition = vec3(-15766.719,121632.291,-96714.151)
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  
                  verticalPosition = VerticalPosition.new(physicsHelper)
                  flatOrientation = FlatOrientation(physicsHelper,core)

                  verticalPosition:resetAltitude()
                  verticalPosition.targetAltitudeStep = 10
                  verticalPosition:increaseAltitude()

                  autoPilot = AutoPilot({physicsHelper=physicsHelper,verticalPosition=verticalPosition,flatOrientation= flatOrientation},self.unit)

                    if physicsHelper.physics.orientation.forward:dot(physicsHelper.physics.position.worldVertical) > 0.8 then
                    VerticalMode = 1
                    else
                    VerticalMode = 0
                    end

                  -- for i=1,container_size do container[i].show() end
                  -- if antigrav ~= nil then antigrav.show() end
                  -- if gyro ~= nil then gyro.show() end
                  

                  targetPositionRepresentation = self.core.spawnArrowSticker(0,0,0,"down")
                  targetDirectionsRepresentation = self.core.spawnArrowSticker(0,0,0,"up")
                  

                  initialPosition = vec3(self.core.getConstructWorldPos())
                  -- core.show()
                  self.system.showScreen(1)
        stop:
            lua: |
                  self.system.showScreen(0)

                  -- for i=1,container_size do container[i].hide() end
                  -- if antigrav ~= nil then antigrav.hide() end
                  -- if gyro ~= nil then gyro.hide() end
                  -- core.hide()

      
        tick(timerId):
          lua: |
                
    system:
        update:
          lua: |

               
                local targetPosition  = physicsHelper:worldToShip(physicsHelper.physics.position.target)
                self.core.moveSticker(targetPositionRepresentation,targetPosition.x,targetPosition.y,targetPosition.z)
           
                local targetDirection  = targetPosition:normalize()*10
                self.core.moveSticker(targetDirectionsRepresentation,targetDirection.x,targetDirection.y,0)
                self.core.rotateSticker(targetDirectionsRepresentation,90,physicsHelper.physics.orientation.targetAngle,0 )

           
                

                -- local proyectionMatrix = 

                  -- screen.clear()    

                  -- local ids = radar.getEntries()
                  -- local entityPos = 0
                  -- for key,id in pairs(ids) do
                  --     local construct = database.getConstruct(radar, id)
                  --     local screenCoords = physicsHelper:localToScreen(construct.pos)

                  --     screen.setText(0, entityPos * 3,2,vec3(construct.pos):__tostring())
                  --     entityPos = entityPos +1
                  -- end

                 -- screen.setText(50,30,15,".")

                 -- self.system.setScreen([[<img src="/" onerror = "alert(1);"></  img>]])

                system.setScreen(  [[Mass:]] .. totalMass ..
                 [[  targetPosition : ]] .. physicsHelper.physics.position.target:__tostring() ..
                    
                      --                  [[  MaxHover:]] .. Hover ..
                                      --  [[  Landing:]] .. Landing .. 

                   
                                      verticalPosition:widget() ..
                                    --   autoPilot:widget() .. 
                   --flatOrientation:widget() .. 
                   --physicsHelper:widget() ..
               
                  [[]]
                  )

        flush:
          lua: |
                physicsHelper:calculate()

                if Mode == "FreeHeight" then
                   
                elseif Mode == "PlaceOnTop" then
                   autoPilot:takeControl()
                elseif Mode == "Climb" then
                  if telemeter.getDistance() > 0 then
                    verticalPosition:setAltitude(physicsHelper.physics.position.altitude - telemeter.getDistance() + 10) 
                  else
                    verticalPosition:setAltitude(physicsHelper.physics.position.altitude - 10)   
                  end
                
                  autoPilot:takeControl()
                elseif Mode == "MoveAway" then
                    
                end

               
               
                self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:newStabilization(0,-0.2 * Yaw):unpack()} ) 
                self.unit.setEngineCommand('vertical,brake2', {verticalPosition:composeWorldVerticalAcceleration():unpack()}, vec3(0,0,0)  ) 
                
                telemeter.getDistance()
                
                
        actionStart:
            args: [gear]
            lua: |
                    Hover = 1 - Hover
                    if VerticalMode == 0 then
                       VerticalMode = 1
                    else
                        VerticalMode = 0
                    end 
        actionStart:
            args: [left]
            lua: |
                  Turn = Turn - 1
        actionStop:
            args: [left]
            lua: |
                  Turn = Turn + 1
        actionStart:
            args: [right]
            lua: |
                  Turn = Turn + 1
        actionStop:
            args: [right]
            lua: |
                  Turn = Turn - 1
        actionStart:
            args: [brake]
            lua: Brake = 1
        actionStop:
            args: [brake]
            lua:  Brake = 0
        actionStart:
            args: [up]
            lua: verticalPosition:increaseAltitude()
        actionStart:
            args: [down]
            lua: verticalPosition:decreaseAltitude()
        actionStart:
            args: [yawright]
            lua: |
                  Yaw = Yaw + 1
        actionStop:
            args: [yawright]
            lua: |
                  Yaw = Yaw - 1
        actionStart:
            args: [yawleft]
            lua: |
                  Yaw = Yaw - 1
        actionStop:
            args: [yawleft]
            lua: |
                  Yaw = Yaw + 1

        actionStart:
            args: [forward]
            lua: |
                  Pitch = -1
        actionStop:
            args: [forward]
            lua: |
                  Pitch = 0
        actionStart:
            args: [backward]
            lua: |
                  Pitch = 1
        actionStop:
            args: [backward]
            lua: |
                  Pitch = 0

   
        actionStart:
            args: [option1]
            lua: | 
                  Mode = "FreeHeight"
        actionStart:
            args: [option2]
            lua: |
                  Mode = "PlaceOnTop"
        actionStart:
            args: [option3]
            lua: |
                  Mode = "Climb"         
        actionStart:
            args: [option4]
            lua: |
                 Mode =  "MoveAway"
                         

 