##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: Spout MK2

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit
    vertical:
        class: Aileron
    horizontal:
        class: AtmosphericEngine
    gear:
        class: LandingGearUnit
        select: all
    telemeter:
        class: TelemeterUnit

handlers:
    unit:
        start:
            lua: |
                  local PhysicsHelper = require("autoconf/custom/Libs/PhysicsHelper")
                  local VerticalPosition = require("autoconf/custom/Libs/VerticalPosition")
                  local FlatOrientation = require("autoconf/custom/Libs/FlatOrientation")
                  local AutoPilot = require("autoconf/custom/Libs/AutoPilot")
                  

                  Nav = Navigator.new(self.system, self.core, self.unit)
                  
                  Turn = 0
                  Pitch = 0
                  goToTarget = 0
                  startingPosition = vec3(0,0,0)
                  
                  local totalMass = self.core.getConstructMass()
                  for i=1,container_size do totalMass = totalMass + container[i].getItemsMass() end

                  local engines = {
                    vertical = self.vertical,
                    amountVertical = 0,

                    horizontal = self.horizontal,
                    amountHorizontal = 32,

                    aileronV = self.aileronV,
                    amountAileronV = 0,
                    
                    aileronH = self.aileronH,
                    amountAileronH = 0,
                  }

                  physicsHelper = PhysicsHelper.new(self.core,self.unit, totalMass, engines)
                  
                  startingPosition = physicsHelper.physics.position.world
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  
                  verticalPosition = VerticalPosition.new(physicsHelper)
                  flatOrientation = FlatOrientation(physicsHelper)

                  autoPilot = AutoPilot({physicsHelper=physicsHelper,verticalPosition=verticalPosition,flatOrientation= flatOrientation},self.unit)

                    if physicsHelper.physics.orientation.forward:dot(physicsHelper.physics.position.worldVertical) > 0.8 then
                    VerticalMode = 1
                    else
                    VerticalMode = 0
                    end

                  -- for i=1,container_size do container[i].show() end
                  -- if antigrav ~= nil then antigrav.show() end
                  -- if gyro ~= nil then gyro.show() end
                  

                  targetPositionRepresentation = self.core.spawnArrowSticker(0,0,0,"down")
                  targetDirectionsRepresentation = self.core.spawnArrowSticker(0,0,0,"up")
                  

                  initialPosition = vec3(self.core.getConstructWorldPos())
                  -- core.show()
                  self.system.showScreen(1)
        stop:
            lua: |
                  self.system.showScreen(0)

                  -- for i=1,container_size do container[i].hide() end
                  -- if antigrav ~= nil then antigrav.hide() end
                  -- if gyro ~= nil then gyro.hide() end
                  -- core.hide()

      
        tick(timerId):
          lua: |
                
    system:
        update:
          lua: |
                Nav:update()
                local targetPosition  = physicsHelper:worldToShip(physicsHelper.physics.position.target)
                self.core.moveSticker(targetPositionRepresentation,targetPosition.x,targetPosition.y,targetPosition.z)
           
                local targetDirection  = targetPosition:normalize()*10
                self.core.moveSticker(targetDirectionsRepresentation,targetDirection.x,targetDirection.y,0)
                self.core.rotateSticker(targetDirectionsRepresentation,90,physicsHelper.physics.orientation.targetAngle,0 )

           
                

                -- local proyectionMatrix = 

                  -- screen.clear()    

                  -- local ids = radar.getEntries()
                  -- local entityPos = 0
                  -- for key,id in pairs(ids) do
                  --     local construct = database.getConstruct(radar, id)
                  --     local screenCoords = physicsHelper:localToScreen(construct.pos)

                  --     screen.setText(0, entityPos * 3,2,vec3(construct.pos):__tostring())
                  --     entityPos = entityPos +1
                  -- end

                 -- screen.setText(50,30,15,".")

                 -- self.system.setScreen([[<img src="/" onerror = "alert(1);"></  img>]])

                self.system.setScreen( [[<div  style="perspective: 1500px;height:100vh;width:100vw;position:fixed;top:-46.5vh;background-color: rgba(30,150,200,0.03);right:-18px;padding:3px;  box-shadow: inset 0 0 1em #ff00aa;"> ]] .. 
                  
                   verticalPosition:widget() ..
                   autoPilot:widget() .. 
                   flatOrientation:widget() .. 
                   physicsHelper:widget() ..
               
                  [[</div>]]
                  )

        flush:
          lua: |
                physicsHelper:calculate()
              
                if (autoPilot:isActive()) then
                    autoPilot:takeControl()
   
     
                else
                  
                    if VerticalMode == 1 then
                        local mainEnginesAcceleration = verticalPosition:composeHorizontalAcceleration()
                        
                        mainEnginesAcceleration = mainEnginesAcceleration + Nav:getRollInput() * physicsHelper.physics.orientation.right +  Nav:getPitchInput() * physicsHelper.physics.orientation.up 
                        self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration(true):unpack()} ) 
                        if physicsHelper.physics.orientation.forward:dot(physicsHelper.physics.position.worldVertical) > 0.9 then
                          self.unit.setEngineCommand('horizontal', {mainEnginesAcceleration:unpack()} ,  vec3(0,0,0))                    
                        else
                          self.unit.setEngineCommand('horizontal', nullvector ,  nullvector)                    
                        end

                        self.unit.setEngineCommand('brake', {verticalPosition:composeHorizontalAcceleration():unpack()}, nullvector)
                    else
                      
                        local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())

                        local turnVector = physicsHelper.physics.orientation.right * Turn 

                        self.unit.setEngineCommand('horizontal', {(forward * 0.8 + turnVector * 100):unpack()} , nullvector)
                        self.unit.setEngineCommand('vertical', {((turnVector + physicsHelper.physics.orientation.up * Pitch) * 100):unpack()}, vec3(0,0,0))
                        -- self.unit.setEngineCommand('vertical',{verticalPosition:composeVerticalAcceleration():unpack()} , vec3(0,0,0))
                        
                        if (physicsHelper.physics.velocity.tangential.len > 20) then
                            self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration():unpack()} ) 
                        else
                                local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                               + Nav:composeTiltingAngularAcceleration()
                               + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                            self.unit.setEngineCommand('torque', vec3(0,0,0),  {angularAcceleration:unpack()})
                        end

                        if (Pitch == 0) then
                            self.unit.setEngineCommand('altitude', {verticalPosition:composeVerticalAcceleration():unpack()} ,  vec3(0,0,0))                    
                        end
                    end



        

                 if ( Nav:getBrakeInput() == 1) then
                   self.unit.setEngineCommand('brake', {vec3(-2 * Nav:getBrakeInput() * physicsHelper.physics.velocity.world.vector):unpack()}, nullvector)
                else 
                     self.unit.setEngineCommand('brake',nullvector, nullvector)
                
                end
                end
                
                
        actionStart:
            args: [gear]
            lua: |
                    if VerticalMode == 0 then
                       VerticalMode = 1
                    else
                        VerticalMode = 0
                    end

 
        actionStart:
            args: [left]
            lua: |
                  Turn = Turn - 1
                  Nav:decrease(Nav.roll)
        actionStop:
            args: [left]
            lua: |
                  Turn = Turn + 1
                  Nav:increase(Nav.roll)
        actionStart:
            args: [right]
            lua: |
                  Turn = Turn + 1
                  Nav:increase(Nav.roll)
        actionStop:
            args: [right]
            lua: |
                  Turn = Turn - 1
                  Nav:decrease(Nav.roll)
        actionStart:
            args: [brake]
            lua: Nav:increase(Nav.brake)
        actionStop:
            args: [brake]
            lua: Nav:decrease(Nav.brake)
        actionStart:
            args: [up]
            lua: verticalPosition:increaseAltitude()
        actionStart:
            args: [down]
            lua: verticalPosition:decreaseAltitude()
        actionLoop:
            args: [speedup]
            lua: Nav.thrustManager:updateCommand(0.1)
        actionLoop:
            args: [speeddown]
            lua: Nav.thrustManager:updateCommand(-0.1)
        actionStart:
            args: [yawright]
            lua: Nav:decrease(Nav.yaw)
        actionStop:
            args: [yawright]
            lua: Nav:increase(Nav.yaw)
        actionStart:
            args: [yawleft]
            lua: Nav:increase(Nav.yaw)
        actionStop:
            args: [yawleft]
            lua: Nav:decrease(Nav.yaw)

        actionStart:
            args: [forward]
            lua: |
                  Nav:decrease(Nav.pitch)
                  Pitch = -0.2
        actionStop:
            args: [forward]
            lua: |
                  Nav:increase(Nav.pitch)
                  Pitch = 0
        actionStart:
            args: [backward]
            lua: |
                  Nav:increase(Nav.pitch)
                  Pitch = 0.2
        actionStop:
            args: [backward]
            lua: |
                  Nav:decrease(Nav.pitch)
                  Pitch = 0

   
        actionStart:
            args: [option1]
            lua: | 
                  autoPilot:setStatus(0)
        actionStart:
            args: [option2]
            lua: |
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  autoPilot:setStatus(1)
        actionStart:
            args: [option3]
            lua: |
                  physicsHelper:SetOnPlanetDestination(vec3(-94191881.962,12752476.555,-3652551.534))
                  autoPilot:setStatus(1)
                

 