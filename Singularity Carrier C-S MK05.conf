##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: HARVESTER MK2

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
  
    aileronV:
        class: AileronEngine
    gear:
        class: LandingGearUnit
        select: all
    telemeter:
        class: TelemeterUnit

handlers:
    unit:
        start:
            lua: |
                  local PhysicsHelper = require("autoconf/custom/Libs/PhysicsHelper")
                  local VerticalPosition = require("autoconf/custom/Libs/VerticalPosition")
                  local FlatOrientation = require("autoconf/custom/Libs/FlatOrientation")
                  local AutoPilot = require("autoconf/custom/Libs/AutoPilot")
                  --container:
                  -- class: FuelContainer
                  -- select: all
                  Nav = Navigator.new(self.system, self.core, self.unit)
                  Brake = 0
                  FreeManeuver = -1
                  Landing = 1
                  CapSpeed = 0
                  Hover = 0
                  Turn = 0
                  Yaw = 0
                  Pitch = 0
                  goToTarget = 0
                  startingPosition = vec3(0,0,0)
                  
                  totalMass = 0--self.core.getConstructMass()
                  local elements = core.getElementList()
                  local i = 1
                    while elements[i] do
                      totalMass = totalMass + core.getElementMass(elements[i])
                      i = i + 1
                    end
                
                  --for i=1,container_size do totalMass = totalMass + container[i].getItemsMass() end

                  local engines = {
                    vertical = self.vertical,
                    amountVertical = 0,

                    horizontal = self.horizontal,
                    amountHorizontal = 0,

                    aileronV = self.aileronV,
                    amountAileronV = 5,
                    
                    aileronH = self.aileronH,
                    amountAileronH = 0,
                  }

                  physicsHelper = PhysicsHelper.new(self.core,self.unit, totalMass, engines)
                  
                  startingPosition = physicsHelper.physics.position.world
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  
                  verticalPosition = VerticalPosition.new(physicsHelper)
                  flatOrientation = FlatOrientation(physicsHelper)

                  autoPilot = AutoPilot({physicsHelper=physicsHelper,verticalPosition=verticalPosition,flatOrientation= flatOrientation},self.unit)

                    if physicsHelper.physics.orientation.forward:dot(physicsHelper.physics.position.worldVertical) > 0.8 then
                    VerticalMode = 1
                    else
                    VerticalMode = 0
                    end

                  -- for i=1,container_size do container[i].show() end
                  -- if antigrav ~= nil then antigrav.show() end
                  -- if gyro ~= nil then gyro.show() end
                  

                  targetPositionRepresentation = self.core.spawnArrowSticker(0,0,0,"down")
                  targetDirectionsRepresentation = self.core.spawnArrowSticker(0,0,0,"up")
                  

                  initialPosition = vec3(self.core.getConstructWorldPos())
                  -- core.show()
                  self.system.showScreen(1)
        stop:
            lua: |
                  self.system.showScreen(0)

                  -- for i=1,container_size do container[i].hide() end
                  -- if antigrav ~= nil then antigrav.hide() end
                  -- if gyro ~= nil then gyro.hide() end
                  -- core.hide()

      
        tick(timerId):
          lua: |
                
    system:
        update:
          lua: |
                Nav:update()

                  if telemeter ~= nil then
                      if telemeter.getDistance() == -1 then
                          for i=1,gear_size do gear[i].deactivate() end
                      else
                          for i=1,gear_size do gear[i].activate() end
                      end    
                  end


                local targetPosition  = physicsHelper:worldToShip(physicsHelper.physics.position.target)
                self.core.moveSticker(targetPositionRepresentation,targetPosition.x,targetPosition.y,targetPosition.z)
           
                local targetDirection  = targetPosition:normalize()*10
                self.core.moveSticker(targetDirectionsRepresentation,targetDirection.x,targetDirection.y,0)
                self.core.rotateSticker(targetDirectionsRepresentation,90,physicsHelper.physics.orientation.targetAngle,0 )

           
                

                -- local proyectionMatrix = 

                  -- screen.clear()    

                  -- local ids = radar.getEntries()
                  -- local entityPos = 0
                  -- for key,id in pairs(ids) do
                  --     local construct = database.getConstruct(radar, id)
                  --     local screenCoords = physicsHelper:localToScreen(construct.pos)

                  --     screen.setText(0, entityPos * 3,2,vec3(construct.pos):__tostring())
                  --     entityPos = entityPos +1
                  -- end

                 -- screen.setText(50,30,15,".")

                 -- self.system.setScreen([[<img src="/" onerror = "alert(1);"></  img>]])

                self.system.setScreen( [[<div  style="perspective: 1500px;height:100vh;width:100vw;position:fixed;top:0vh;background-color: rgba(30,150,200,0.03);right:0px;padding:3px;  box-shadow: inset 0 0 1em #ff00aa;"> ]] .. 
                   [[Mass:]] .. totalMass ..
                   
                   [[  MaxHover:]] .. Hover ..
                   [[  Landing:]] .. Landing .. [[  Distance: ]] ..  telemeter.getDistance() ..
                   
                   verticalPosition:widget() ..
                   --autoPilot:widget() .. 
                   --flatOrientation:widget() .. 
                   --physicsHelper:widget() ..
               
                  [[</div>]]
                  )

        flush:
          lua: |
                physicsHelper:calculate()
                  

                local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())
                local turnVector = physicsHelper.physics.orientation.right * Turn 

                self.unit.setEngineCommand('horizontal', {( forward ):unpack()} , nullvector)

                self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration(false,Yaw):unpack()} ) 
                -- if (FreeManeuver == 1 or ((physicsHelper.physics.velocity.tangential.len > 20 and FreeManeuver ~= 0) )) then
                --     self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration(false,Yaw):unpack()} ) 
                -- else
                --     local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                --        + Nav:composeTiltingAngularAcceleration()
                --        + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                --     self.unit.setEngineCommand('torque', vec3(0,0,0),  {angularAcceleration:unpack()})
                -- end

                -- if (Pitch == 0) then
                --   self.unit.setEngineCommand('up', {  (physicsHelper.physics.acceleration.potential.up * physicsHelper.physics.orientation.up):unpack()} ,  vec3(0,0,0))        
                --   self.unit.setEngineCommand('down', {  (physicsHelper.physics.acceleration.potential.up * -1 * physicsHelper.physics.orientation.up +verticalPosition:composeVerticalPitchAcceleration(constants.deg2rad * 30 * Pitch)):unpack()} ,  vec3(0,0,0))        
                
                                      
                -- end


                if ( Brake == 1) then
                  self.unit.setEngineCommand('brake', {vec3(-4 * Brake * physicsHelper.physics.velocity.world.vector):unpack()}, nullvector)
                  
                  self.unit.setEngineCommand('altitude', {verticalPosition:composeVerticalPitchAcceleration(constants.deg2rad * 30 * Pitch):unpack()} ,  vec3(0,0,0))  
                  
                  self.unit.setEngineCommand('hover',nullvector, nullvector)
                  self.unit.setEngineCommand('lateral', {( turnVector * 100):unpack()} , nullvector)
                else 
                  if CapSpeed == 1 and physicsHelper.physics.velocity.tangential.len > 12 then    
                      self.unit.setEngineCommand('brake', {vec3(-0.5 * Brake * physicsHelper.physics.velocity.world.vector):unpack()}, nullvector)
                  else
                    self.unit.setEngineCommand('brake',nullvector, nullvector)
                  end
                    
                  if (Landing == 1) then
                    self.unit.setEngineCommand('hover,brake', {verticalPosition:land(-1* (telemeter.getDistance() - 3.5 )):unpack()}, nullvector)
                  elseif (Hover == 1) then
                    self.unit.setEngineCommand('hover', {( physicsHelper.physics.orientation.up * 10000 ):unpack()} , nullvector)
                  else
                    self.unit.setEngineCommand('hover',{verticalPosition:composeVerticalAcceleration():unpack()}, nullvector)
                  end

                  
                  self.unit.setEngineCommand('up', {  (physicsHelper.physics.acceleration.potential.up * physicsHelper.physics.orientation.up + verticalPosition:composeVerticalPitchAcceleration(constants.deg2rad * 30 * Pitch)):unpack()} ,  vec3(0,0,0))        
                  self.unit.setEngineCommand('down', {  (physicsHelper.physics.acceleration.potential.up * -1 * physicsHelper.physics.orientation.up +verticalPosition:composeVerticalPitchAcceleration(constants.deg2rad * 30 * Pitch)):unpack()} ,  vec3(0,0,0))        
                
                  if (Turn == 0) then
                    self.unit.setEngineCommand('left', {( physicsHelper.physics.orientation.right * -1000 ):unpack()} , nullvector)
                    self.unit.setEngineCommand('right', {( physicsHelper.physics.orientation.right * 1000):unpack()} , nullvector)                  
                  else
                    self.unit.setEngineCommand('lateral', {( turnVector * 1000):unpack()} , nullvector)
                  end
                  
                end
                
                
        actionStart:
            args: [gear]
            lua: |
                    Hover = 1 - Hover
                    if VerticalMode == 0 then
                       VerticalMode = 1
                    else
                        VerticalMode = 0
                    end 
        actionStart:
            args: [left]
            lua: |
                  Turn = Turn - 1
        actionStop:
            args: [left]
            lua: |
                  Turn = Turn + 1
        actionStart:
            args: [right]
            lua: |
                  Turn = Turn + 1
        actionStop:
            args: [right]
            lua: |
                  Turn = Turn - 1
        actionStart:
            args: [brake]
            lua: Brake = 1
        actionStop:
            args: [brake]
            lua: Brake = 0
        actionStart:
            args: [up]
            lua: verticalPosition:increaseAltitude()
        actionStart:
            args: [down]
            lua: verticalPosition:decreaseAltitude()
        actionLoop:
            args: [speedup]
            lua: Nav.thrustManager:updateCommand(0.1)
        actionLoop:
            args: [speeddown]
            lua: Nav.thrustManager:updateCommand(-0.1)
        actionStart:
            args: [yawright]
            lua: |
                  Yaw = Yaw + 1
        actionStop:
            args: [yawright]
            lua: |
                  Yaw = Yaw - 1
        actionStart:
            args: [yawleft]
            lua: |
                  Yaw = Yaw - 1
        actionStop:
            args: [yawleft]
            lua: |
                  Yaw = Yaw + 1

        actionStart:
            args: [forward]
            lua: |
                  Pitch = -1
        actionStop:
            args: [forward]
            lua: |
                  Pitch = 0
        actionStart:
            args: [backward]
            lua: |
                  Pitch = 1
        actionStop:
            args: [backward]
            lua: |
                  Pitch = 0

   
        actionStart:
            args: [option1]
            lua: | 
                  verticalPosition:resetAltitude()
        actionStart:
            args: [option2]
            lua: |
                  Landing = 1 - Landing
        actionStart:
            args: [option3]
            lua: |
                  CapSpeed = 1 - CapSpeed         
        actionStart:
            args: [option4]
            lua: |
                  if FreeManeuver == -1 then FreeManeuver = 1 end  
                  FreeManeuver = 1 - FreeManeuver         

                         

 