##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: AlphaAdvancer

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit
    vertical:
        class: Aileron
    horizontal:
        class: AtmosphericEngine
    gear:
        class: LandingGearUnit
        select: all
    telemeter:
        class: TelemeterUnit

handlers:
    unit:
        start:
            lua: |
                  -- local PhysicsHelper = require("autoconf/custom/Libs/PhysicsHelper")
                  -- local VerticalPosition = require("autoconf/custom/Libs/VerticalPosition")
                  -- local FlatOrientation = require("autoconf/custom/Libs/FlatOrientation")
                  -- local AutoPilot = require("autoconf/custom/Libs/AutoPilot")
                  
                  PlanetsDatabase={Alioth={position=vec3(0,0,0),name="Alioth"},Jago={position=vec3(-94134464.000,12765536.000,-3634464.000),name="Jago"},Lacobus={position=vec3(98865536.000,-13534464.000,-934464.000),name="Lacobus"},Symeon={position=vec3(14165536.000,-85634464.000,-934464.000),name="Simeon"}}
                  
               

                  PhysicsHelperClass = {}
                  PhysicsHelperClass.__index = PhysicsHelperClass;

                  -- engines = {vertical, aileronV, aileronH, amountVertical, amountAileronV, amountAileronH

                  local function new( core, control, mass, engines)
                    local self = setmetatable({}, PhysicsHelperClass)
                
                    self.control = control
                    self.core = core
                    self.mass = mass
                    self.engines = engines
                    self.widgetInfo = {}

                    self.physics = nil
                    self.currentPlanet = nil
                    self.destination = nil

                    self:setCurrentPlanet()
                    self:SetOnPlanetDestination(PlanetsDatabase.Symeon.position)
                    self:calculate()

                    return self
                  end

                  function PhysicsHelperClass:worldToShip(worldPosition)
                      local worldToShipTraslationTransform = mat4():translate(-1 * vec3(self.core.getConstructWorldPos()))
                      local forward = self.physics.orientation.forward
                      local up = self.physics.orientation.up
                      local right = self.physics.orientation.right
        
                      local worldToShipRotationTransform = mat4({right.x,forward.x,up.x,0,right.y,forward.y,up.y,0,right.z,forward.z,up.z,0,0,0,0,1})

                      local shipPosition = worldToShipTraslationTransform * worldToShipRotationTransform * {worldPosition.x,worldPosition.y,worldPosition.z,1}
                      return vec3(shipPosition[1],shipPosition[2],shipPosition[3])
                  end

                  function PhysicsHelperClass:widget()
                     local widgetText = [[]];

                     self.widgetInfo.CROSS_SECTIOn = self.core.getConstructCrossSection()
                     currentForce = (self.engines.horizontal.getMaxThrust() *  self.engines.amountHorizontal )
                     self.widgetInfo.FACTOR = currentForce / (self.control.getAtmosphereDensity() *   vec3(self.core.getWorldVelocity()):len() * vec3(self.core.getWorldVelocity()):len() * self.core.getConstructCrossSection())
                     
                    for k,v,item in pairs(self.widgetInfo) do
                      widgetText = widgetText .. [[<div>]] ..k.. [[</div> <div><b>]] .. v .. [[</b></div>]]
                    end
                  return [[
                            <div style="width: 100%;background-color: #252f43;border-radius: 5px;font-size: 14px;"> VerticalPosition]] ..
                               widgetText ..
                           [[</div>
                        ]]
                  end  


                  function PhysicsHelperClass:worldToShipSpeed(worldPosition)
                      local worldToShipTraslationTransform = mat4():translate(-1 * vec3(self.core.getConstructWorldPos()))
                                  
                      local forward = vec3(self.physics.velocity.tangential.vector):normalize()
                      local up = self.physics.orientation.up
                      local right = forward:cross(up):normalize()
                      up = right:cross(forward):normalize()
            
                      local worldToShipRotationTransform = mat4({right.x,forward.x,up.x,0,right.y,forward.y,up.y,0,right.z,forward.z,up.z,0,0,0,0,1})
                      local shipPosition = worldToShipTraslationTransform * worldToShipRotationTransform * {worldPosition.x,worldPosition.y,worldPosition.z,1}
                      return vec3(shipPosition[1],shipPosition[2],shipPosition[3])
                  end

                  function PhysicsHelperClass:localToScreen(localPosition)
                    local n = 1 -- near = 1 meter
                    local f = 10000 -- far = 10000 meters
                    local l = -0.5 -- near = -0.5 meter
                    local r = 0.5 -- near = 0.5 meter
                    local b = -0.3 -- near = -0.3 meter
                    local t = 0.3 -- top = 0.3 meter


                      local worldToShipTraslationTransform = mat4({
                        2*n/(r-l),  0,          (r+l)/(r-l),    0,
                        0,          2*n/(t-b),  (t+b)/(t-b),    0,
                        0,          0,          -1*(f+n)/(f-n), -2*f*n/(f-n),
                        0,          0,          -1,             0
                        })

                      
                  end


                  function PhysicsHelperClass:setCurrentPlanet()
                    if (self.currentPlanet == nil) then
                      local closestPlanet = nil 
                      local bestDistance = -1

                      for k, planet in pairs(PlanetsDatabase) do
                        if (bestDistance == -1 or (vec3(self.core.getConstructWorldPos()) - planet.position):len() < bestDistance) then
                          self.currentPlanet = planet
                        end
                      end
                    end
                  end

                  -- this makes the spherical coordinates relative to the desired destination beeing Theta the angular distance and Phy the perpendicular
                  function PhysicsHelperClass:SetOnPlanetDestination( destination) -- in global coordinates
                    self.destination = destination;
                  end

                  function PhysicsHelperClass:calculate()
                   
                    local worldGravity = vec3(self.core.getWorldGravity())
                    local  worldVertical = (-1 * worldGravity):normalize()

                    local verticalVelocityMagnitude = vec3(self.core.getWorldVelocity()):dot(worldVertical) 
                    local tangentialVelocityVector =  vec3(self.core.getWorldVelocity()):project_on_plane(worldVertical)

                    local radius = (vec3(self.core.getConstructWorldPos()) - self.currentPlanet.position):len()
                    local centrifugalAcceleration = utils.pow2(tangentialVelocityVector:len()) / radius;

                    local angularVelocityMagnitude = tangentialVelocityVector:len() / radius


                    -- planet relative magnitudes
                    local planetRelativePosition = vec3(self.core.getConstructWorldPos()) - self.currentPlanet.position
                    local planetNorth = self.destination - self.currentPlanet.position

                    local destinationInTangentPlane = planetNorth:project_on_plane(worldVertical)

                    -- local ThetaPositon = planetRelativePosition:angle_between(planetNorth)

                    -- local proyectedNorthVector = planetNorth:project_on_plane(planetRelativePosition)

                    local PhySpeed =   tangentialVelocityVector:normalize():cross(destinationInTangentPlane:normalize()):len()
                    local ThetaSpeed = tangentialVelocityVector:normalize():dot(destinationInTangentPlane:normalize())
                    
                    local tagetDirectionAngle = 0
                     local targetLocalPosition = self.destination
                    if (self.physics ~= nil) then
                    
                       if tangentialVelocityVector:len() > 20 then
                         targetLocalPosition  = self:worldToShipSpeed(self.destination)
                       else
                         targetLocalPosition  = self:worldToShip(self.destination)
                       
                       end

                       if (targetLocalPosition.x ~= 0) then
                          if targetLocalPosition.x < 0 then
                              tagetDirectionAngle =  math.atan(targetLocalPosition.y/targetLocalPosition.x)/ math.pi * 180 +90
                          else
                               tagetDirectionAngle =  math.atan(targetLocalPosition.y/targetLocalPosition.x)/ math.pi * 180  -90
                          end
                      end
                    end

                    self.physics =  { 
                      acceleration = {
                        potential = {
                          up = self:getEnginesMaxUpAcceleration(), --+ centrifugalAcceleration,
                          forward = self:getEnginesMaxForwardAcceleration(), --+ centrifugalAcceleration,
                          down = self:getEnginesMaxDownAcceleration() + worldGravity:len() - centrifugalAcceleration,
                          lateral = self:getEnginesMaxLateralAcceleration()
                        },
                        centrifugal = {
                          vector = centrifugalAcceleration * worldVertical,
                          len = centrifugalAcceleration
                        },
                        gravity = {
                          vector = worldGravity,
                          len = worldGravity:len()
                        }
                      },
                      velocity={
                        world={
                          vector = vec3(self.core.getWorldVelocity())
                        },
                        tangential = {
                          vector = tangentialVelocityVector,
                          len = tangentialVelocityVector:len(),
                        },
                        vertical = {
                          vector = verticalVelocityMagnitude * worldVertical,
                          magnitude = verticalVelocityMagnitude
                        },
                        spherical = {
                          phy=  PhySpeed,
                          theta= ThetaSpeed,
                          magnitude= angularVelocityMagnitude
                        }
                      }, 
                      position={
                        altitude= self.core.getAltitude(),
                        world = vec3(self.core.getConstructWorldPos()),
                        target = self.destination,
                        radius = radius,
                        -- spherical = {
                        --   Theta = ThetaPositon
                        -- },
                        atmosphere = self.control.getAtmosphereDensity(),
                        worldVertical = worldVertical,
                        
                        targetWorld = {
                          altitude = 0, -- TODO

                        },
                        targetLocal = {
                          vector = targetLocalPosition,
                          len = targetLocalPosition:len(),

                        }
                      },

                      orientation = {
                          up =  vec3(self.core.getConstructWorldOrientationUp()):normalize(),
                          forward = vec3(self.core.getConstructWorldOrientationForward()):normalize(),
                          right = vec3(self.core.getConstructWorldOrientationRight()):normalize(),
                          inplanetTarget = vec3(0,0,0),
                          targetAngle = tagetDirectionAngle
                      }


                    }

                  end

                  function PhysicsHelperClass:getEnginesMaxUpAcceleration()
                    local enginesVerticalThrust = 0
                    if  (self.engines.amountVertical > 0) then 
                      enginesVerticalThrust = self.engines.vertical.getMaxThrust() *  self.engines.amountVertical
                    end

                    local aileronVerticalThrust = 0
                    if  (self.engines.amountAileronV > 0) then 
                      aileronVerticalThrust = self.engines.aileronV.getMaxThrust() *  self.engines.amountAileronV
                    end
                    return (enginesVerticalThrust + aileronVerticalThrust ) /  self.mass;
                  end


                  function PhysicsHelperClass:getEnginesMaxForwardAcceleration()
                    if  (self.engines.amountHorizontal == 0) then return 0 end
                    return (self.engines.horizontal.getMaxThrust() *  self.engines.amountHorizontal ) /  self.mass;
                  end

               
                  function PhysicsHelperClass:getEnginesMaxDownAcceleration()
                    if  (self.engines.amountAileronV == 0) then return 0 end
                    return (self.engines.aileronV.getMaxThrust() *  self.engines.amountAileronV ) /  self.mass;
                  end

                  function PhysicsHelperClass:getEnginesMaxLateralAcceleration()
                    if  (self.engines.amountAileronH == 0) then return 0 end
                    return (self.engines.aileronH.getMaxThrust() *  self.engines.amountAileronH ) /  self.mass;
                  end

                  PhysicsHelper =  setmetatable(
                      {
                          new = new
                      }, {
                          __call = function(_, ...) return new(...) end
                      }
                  )


                  VerticalPositionClass={}VerticalPositionClass.__index=VerticalPositionClass;local function a(b)local self=setmetatable({},VerticalPositionClass)self.PHelper=b;self.altitudeToleranceError=0.5;self.maxUpAcceleration=50;self.maxDownAcceleration=self.maxUpAcceleration*-1;self.targetAltitude=self.PHelper.physics.position.altitude;self.targetAltitudeStep=50;self.widgetInfo={}return self end;function VerticalPositionClass:widget()local c=[[]]for d,e,f in pairs(self.widgetInfo)do c=c..[[<div>]]..d..[[</div> <div><b>]]..e..[[</b></div>]]end;return[[<div style="width: 100%;background-color: #252f43;border-radius: 5px;font-size: 14px;"> VerticalPosition]]..c..[[</div>]]end;function VerticalPositionClass:composeHorizontalAcceleration()return self.PHelper.physics.orientation.forward*self:optimalAceleration(true)end;function VerticalPositionClass:composeVerticalAcceleration()return self.PHelper.physics.orientation.up*self:optimalAceleration(false)end;function VerticalPositionClass:optimalAceleration(g)if math.abs(self.PHelper.physics.velocity.vertical.magnitude)<1 and math.abs(self:getVerticalDistanceError())<=self.altitudeToleranceError then return self:stabilice()else return self:fastestContorledAproach(g)end end;function VerticalPositionClass:stabilice()self.widgetInfo.stable="true"return self.PHelper.physics.acceleration.gravity.len*(1-self.PHelper.physics.velocity.vertical.magnitude)end;function VerticalPositionClass:fastestContorledAproach(g)self.widgetInfo.stable="false"local h=self:getVerticalDistanceError()local i=math.abs(2*h/(self.PHelper.physics.velocity.vertical.magnitude or epsilon))local j=math.abs(self.PHelper.physics.velocity.vertical.magnitude/i)if h>0 then if self.PHelper.physics.velocity.vertical.magnitude<0 or j<self.PHelper.physics.acceleration.potential.down then self.widgetInfo.operation='->____|_____'return self.maxUpAcceleration else self.widgetInfo.operation='___<-|______'return self.PHelper.physics.velocity.vertical.magnitude*-2 end else local k=self.PHelper.physics.acceleration.potential.up;if g==true then k=self.PHelper.physics.acceleration.potential.forward end;if self.PHelper.physics.velocity.vertical.magnitude>0 or j<k then self.widgetInfo.operation='_____|____<-'return self.maxDownAcceleration else self.widgetInfo.operation='_____|->____'return self.PHelper.physics.velocity.vertical.magnitude*2 end end end;function VerticalPositionClass:getVerticalDistanceError()self.widgetInfo.altitudeError=self.targetAltitude-self.PHelper.physics.position.altitude;return self.targetAltitude-self.PHelper.physics.position.altitude end;function VerticalPositionClass:increaseAltitude()self.targetAltitude=self.targetAltitude+self.targetAltitudeStep end;function VerticalPositionClass:setAltitude(l)self.targetAltitude=l end;function VerticalPositionClass:decreaseAltitude()self.targetAltitude=self.targetAltitude-self.targetAltitudeStep end;VerticalPosition=setmetatable({new=a},{__call=function(m,...)return a(...)end})
                  FlatOrientationClass={}FlatOrientationClass.__index=FlatOrientationClass;local function a(b)local self=setmetatable({},FlatOrientationClass)self.PHelper=b;self.angleToleranceError=0.0005;self.maxUpAcceleration=100;self.maxDownAcceleration=self.maxUpAcceleration*-1;self.pitchRollSpeed=5;self.yawSpeed=80;self.pitchPID=pid.new(1,0,10)self.rollPID=pid.new(1,0,10)self.yawPID=pid.new(1,0,10)self.widgetInfo={}self.debugger=''return self end;function FlatOrientationClass:widget()local c=[[]]for d,e,f in pairs(self.widgetInfo)do c=c..[[<div>]]..d..[[</div> <div><b>]]..e..[[</b></div>]]end;return[[<div style=]]..singularityContainerStyle..[[> VerticalPosition]]..c..[[</div>]]end;function FlatOrientationClass:composeAngularAcceleration()self.debugger=[[]]local g=-1*self.PHelper.physics.acceleration.gravity.vector;local h=self.PHelper.physics.velocity.tangential.vector;local i=h:cross(g)return vec3(0,0,0)end;function FlatOrientationClass:getStabilizedTransform()local g=self.PHelper.physics.orientation.up;local i=self.PHelper.physics.orientation.right;local h=self.PHelper.physics.orientation.forward;local j=self.PHelper.physics.position.worldVertical;if j:len()>epsilon then local k=j:project_on_plane(h):normalize_inplace()local l,m=getAxisAngleRad(g,k,h)self.rollPID:inject(m)local n=self.rollPID:get()g=g:rotate(n,l)i=i:rotate(n,l)h=h:rotate(n,l)local k=j:project_on_plane(i):normalize_inplace()l,m=getAxisAngleRad(g,k,i)self.pitchPID:inject(m)local n=self.pitchPID:get()g=g:rotate(n,l)i=i:rotate(n,l)h=h:rotate(n,l)if self.PHelper.physics.velocity.tangential.len>10 then local o=self.PHelper.physics.velocity.tangential.vector:project_on_plane(g):normalize_inplace()l,m=getAxisAngleRad(h,o,g)self.yawPID:inject(m)local n=self.yawPID:get()g=g:rotate(n,l)i=i:rotate(n,l)h=h:rotate(n,l)end end;return g,i,h end;function FlatOrientationClass:getStabilizedTransformVertical()local g=self.PHelper.physics.orientation.up;local i=self.PHelper.physics.orientation.right;local h=self.PHelper.physics.orientation.forward;local j=self.PHelper.physics.position.worldVertical;if j:len()>epsilon then local o=j:project_on_plane(g):normalize_inplace()local l,m=getAxisAngleRad(h,o,g)self.rollPID:inject(m)local n=self.rollPID:get()g=g:rotate(n,l)i=i:rotate(n,l)h=h:rotate(n,l)local o=j:project_on_plane(i):normalize_inplace()l,m=getAxisAngleRad(h,o,i)self.pitchPID:inject(m)local n=self.pitchPID:get()g=g:rotate(n,l)i=i:rotate(n,l)h=h:rotate(n,l)end;return g,i,h end;function FlatOrientationClass:composeControlledStabAngularAcceleration(p)local g,i,h;if p~=nil then g,i,h=self:getStabilizedTransformVertical()else g,i,h=self:getStabilizedTransform()end;local q,r=getAxisAngleRad(self.PHelper.physics.orientation.up,g,i)local s=r*q;local q,r=getAxisAngleRad(self.PHelper.physics.orientation.forward,h,g)local t=r*q;local u=self.pitchRollSpeed*s+self.yawSpeed*t;return u end;function FlatOrientationClass:fastestContorledAproach()self.widgetInfo.stable=false;local v=self:getVerticalDistanceError()local w=math.abs(2*(v/verticalVelocityMagnitude+epsilon))local x=math.abs(self.PHelper.physics.velocity.vertical.magnitude/w)if v>0 then if x<self.PHelper.physics.acceleration.potential.down then self.debugger=self.debugger..'Acceleration Up'return self.maxUpAcceleration else self.debugger=self.debugger..'Deceleration Up'return self.maxDownAcceleration end else if x<self.PHelper.physics.acceleration.potential.up or x<1 then self.debugger=self.debugger..'Acceleration Down'return self.maxDownAcceleration else self.debugger=self.debugger..'Deceleration Down'return self.maxUpAcceleration end end end;FlatOrientation=setmetatable({new=a},{__call=function(y,...)return a(...)end})
                  AutoPilotClass={}AutoPilotClass.__index=AutoPilotClass;local function a(b)local self=setmetatable({},AutoPilotClass)self.PHelper=b;self.active=false;self.orientationPID=pid.new(1,0,10)self.altitude=0;self.thrust=0;self.brakes=vec3(0,0,0)self.verticalMode=false;self.aileronAcceleration=vec3(0,0,0)self.isLanding=false;self.widgetInfo={}self.onTarget=false;return self end;function AutoPilotClass:widget()local c=[[]]for d,e,f in pairs(self.widgetInfo)do c=c..[[<div>]]..d..[[</div> <div><b>]]..e..[[</b></div>]]end;return[[<div style="position:fixed;top:0%;left:0%;width: 100%;background-color:orange;color:black;height:500px; #258f43;border-radius: 5px;font-size: 14px;"> AutoPilot]]..self.PHelper.physics.velocity.tangential.len..c..[[</div>]]end;function AutoPilotClass:calculateState()self.orientationPID:inject(-1*self.PHelper.physics.orientation.targetAngle)turnFactor=self.orientationPID:get()local g=vec3(self.PHelper.physics.position.target-self.PHelper.physics.position.world):project_on_plane(self.PHelper.physics.position.worldVertical):len()local h=vec3(self.PHelper.physics.position.target-self.PHelper.physics.position.world):dot(self.PHelper.physics.position.worldVertical)self.widgetInfo.verticalDistance=h;self.widgetInfo.thrust=[[<div style="width:200px;height: 10px;background-color:grey;border:1px solid white"><div style="width:]]..self.thrust*200 ..[[px;height: 5px;background-color:orange"></div</div>]]self.widgetInfo.brakes=[[<div style="width:200px;height: 10px;background-color:grey;border:1px solid white"><div style="width:]]..self.brakes:len()..[[px;height: 5px;background-color:black"></div</div>]]if self.onTarget then self.widgetInfo.onTarget="TRUE"else self.widgetInfo.onTarget="FALSE"end;if self.onTarget then self.thrust=0;self.verticalMode=true;self.aileronAcceleration=vec3(0,0,0)self.brakes=vec3(0,0,0)self.altitude=self.PHelper.physics.position.altitude-10 elseif g>300 then self.widgetInfo.state=[[<div style="width:40px;border:2px solid white;background-color:white">Aproximation</div>]]self.isLanding=false;self.altitude=self.PHelper.physics.position.altitude+h+50;if(h+50)/g>0.05 then self.verticalMode=true;self.thrust=0 else self.verticalMode=false;self.thrust=0.8;self.aileronAcceleration=physicsHelper.physics.orientation.right*turnFactor*100 end;self.brakes=vec3(0,0,0)elseif g>30 then self.widgetInfo.state=[[<div style="width:80px;border:2px solid grey;background-color:grey">Deceleration</div>]]self.thrust=0.1;self.isLanding=false;self.altitude=self.PHelper.physics.position.altitude+h-5;self.aileronAcceleration=physicsHelper.physics.orientation.right*turnFactor*100;self.verticalMode=false;if self.PHelper.physics.velocity.tangential.len>40 then self.brakes=-0.2*self.PHelper.physics.velocity.world.vector else self.brakes=vec3(0,0,0)end elseif g>3 and self.isLanding==false then self.widgetInfo.state=[[<div style="width:120px;border:2px solid purple;background-color:purple">Positioning</div>]]self.thrust=0.00;self.aileronAcceleration=vec3(0,0,0)if self.PHelper.physics.velocity.tangential.len>2 then self.brakes=-1*self.PHelper.physics.velocity.world.vector else self.brakes=vec3(0,0,0)end else self.widgetInfo.state=[[<div style="width:160px;border:2px solid red;background-color:red">Vertival Landing</div>]]if self.onTarget then self.widgetInfo.onTarget="TRUE"else self.widgetInfo.onTarget="FALSE"end;self.thrust=0.00;self.verticalMode=true;self.aileronAcceleration=vec3(0,0,0)self.isLanding=true;self.widgetInfo.tangentialSPD=self.PHelper.physics.velocity.tangential.len;if self.PHelper.physics.velocity.tangential.len>0.05 then self.brakes=-5*self.PHelper.physics.velocity.world.vector else self.verticalMode=true;if h>40 then self.brakes=vec3(0,0,0)elseif h>10 then self.brakes=-0.2*self.PHelper.physics.velocity.world.vector elseif self.PHelper.physics.velocity.vertical.vector:len()>0.5 then self.brakes=-5*self.PHelper.physics.velocity.world.vector else self.onTarget=true end end end end;function AutoPilotClass:setStatus(i)self.active=i==1 end;function AutoPilotClass:isActive()return self.active end;function AutoPilotClass:getAltitude()return self.altitude end;function AutoPilotClass:getThrust()return self.thrust end;function AutoPilotClass:getBrakeAcceleration()return self.brakes end;function AutoPilotClass:getAileronAcceleration()return self.aileronAcceleration end;function AutoPilotClass:isVertical()return self.verticalMode end;AutoPilot=setmetatable({new=a},{__call=function(j,...)return a(...)end})

                  Nav = Navigator.new(self.system, self.core, self.unit)
                  Nav.pitchRollAmplitude = 0.5
                  Nav.pitchStabVelocityStart = 30
                  Nav.pitchStabVelocityEnd = 60
                  Nav.rollStabVelocityStart = 110
                  Nav.rollStabVelocityEnd = 150
                  Turn = 0
                  Pitch = 0
                  goToTarget = 0
               
                  startingPosition = vec3(0,0,0)


                  phyPID = pid.new(1, 0, 10)
                  
                  local totalMass = self.core.getConstructMass()
                  for i=1,container_size do totalMass = totalMass + container[i].getItemsMass() end

                  local engines = {
                    vertical = self.vertical,
                    amountVertical = 1,

                    horizontal = self.horizontal,
                    amountHorizontal = 2,

                    aileronV = self.aileronV,
                    amountAileronV = 0,
                    
                    aileronH = self.aileronH,
                    amountAileronH = 0,
                  }

                  physicsHelper = PhysicsHelper.new(self.core,self.unit, totalMass, engines)
                  
                  startingPosition = physicsHelper.physics.position.world
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  
                  verticalPosition = VerticalPosition.new(physicsHelper)
                  flatOrientation = FlatOrientation(physicsHelper)
                  autoPilot = AutoPilot(physicsHelper)

                    if physicsHelper.physics.orientation.forward:dot(physicsHelper.physics.position.worldVertical) > 0.8 then
                    VerticalMode = 1
                    else
                    VerticalMode = 0
                    end
                  self.system.showScreen(1)

                  for i=1,container_size do container[i].show() end
                  if antigrav ~= nil then antigrav.show() end
                  if gyro ~= nil then gyro.show() end
                  

                  targetPositionRepresentation = self.core.spawnArrowSticker(0,0,0,"down")
                  targetDirectionsRepresentation = self.core.spawnArrowSticker(0,0,0,"up")
                  

                  initialPosition = vec3(self.core.getConstructWorldPos())
                  core.show()
        stop:
            lua: |
                 self.system.showScreen(0)

                  for i=1,container_size do container[i].hide() end
                  if antigrav ~= nil then antigrav.hide() end
                  if gyro ~= nil then gyro.hide() end
                  core.hide()

      
        tick(timerId):
          lua: |
                
    system:
        update:
          lua: |
                Nav:update()
                local targetPosition  = physicsHelper:worldToShip(physicsHelper.physics.position.target)
                self.core.moveSticker(targetPositionRepresentation,targetPosition.x,targetPosition.y,targetPosition.z)
           
                local targetDirection  = targetPosition:normalize()*10
                self.core.moveSticker(targetDirectionsRepresentation,targetDirection.x,targetDirection.y,0)
                self.core.rotateSticker(targetDirectionsRepresentation,90,physicsHelper.physics.orientation.targetAngle,0 )

           
                

                -- local proyectionMatrix = 

                  -- screen.clear()    

                  -- local ids = radar.getEntries()
                  -- local entityPos = 0
                  -- for key,id in pairs(ids) do
                  --     local construct = database.getConstruct(radar, id)
                  --     local screenCoords = physicsHelper:localToScreen(construct.pos)

                  --     screen.setText(0, entityPos * 3,2,vec3(construct.pos):__tostring())
                  --     entityPos = entityPos +1
                  -- end

                 -- screen.setText(50,30,15,".")



                self.system.setScreen( [[<div  style="height:65vh;width:200px;background-color: #888;padding:3px;position:fixed;left:-50px;  box-shadow: inset 0 0 1em #ff00aa;"> ]] .. 
                    autoPilot:widget() ..
                    autoPilot:getBrakeAcceleration():__tostring() ..
                --    verticalPosition:widget() .. 
                --    physicsHelper:widget() ..
                  [[</div>]]
                  )

        flush:
          lua: |
                physicsHelper:calculate()
              
                if (autoPilot:isActive()) then
                    autoPilot:calculateState()
                    verticalPosition:setAltitude(autoPilot:getAltitude())
                 

                    self.unit.setEngineCommand('brake', {vec3(autoPilot:getBrakeAcceleration()):unpack()} , nullvector)
                    self.unit.setEngineCommand('vertical', {vec3(autoPilot:getAileronAcceleration() + physicsHelper.physics.orientation.up * Pitch * 100):unpack()}  , nullvector)
                    self.unit.setEngineCommand('altitude', {vec3(physicsHelper.physics.orientation.up * Pitch * 100):unpack()} ,  vec3(0,0,0))
              
                    if autoPilot:isVertical() then
                        self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration(true):unpack()} ) 
                        self.unit.setEngineCommand('horizontal', {verticalPosition:composeHorizontalAcceleration():unpack()} ,  vec3(0,0,0))   
                        self.unit.setEngineCommand('brake', {(verticalPosition:composeHorizontalAcceleration() + vec3(autoPilot:getBrakeAcceleration())):unpack()}, nullvector)                 
                    elseif (physicsHelper.physics.velocity.tangential.len > 20) then
                        self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration():unpack()} ) 
                        self.unit.setEngineCommand('horizontal', {vec3(autoPilot:getThrust() * physicsHelper.physics.orientation.forward * physicsHelper.physics.acceleration.potential.forward):unpack()} ,  vec3(0,0,0)) 
                    else
                        self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration():unpack()} ) 
                        self.unit.setEngineCommand('horizontal', {vec3(autoPilot:getThrust() * physicsHelper.physics.orientation.forward * physicsHelper.physics.acceleration.potential.forward):unpack()} ,  vec3(0,0,0)) 
                    end
     
                else
                  
                    if VerticalMode == 1 then
                        self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration(true):unpack()} ) 
                        self.unit.setEngineCommand('horizontal', {verticalPosition:composeHorizontalAcceleration():unpack()} ,  vec3(0,0,0))                    
                        self.unit.setEngineCommand('brake', {verticalPosition:composeHorizontalAcceleration():unpack()}, nullvector)
                    else
                        local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                               + Nav:composeTiltingAngularAcceleration()
                               + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                        local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())

                        self.unit.setEngineCommand('vertical', {((physicsHelper.physics.orientation.right * Turn + physicsHelper.physics.orientation.up * Pitch) * 100):unpack()}, vec3(0,0,0))
                        -- self.unit.setEngineCommand('vertical',{verticalPosition:composeVerticalAcceleration():unpack()} , vec3(0,0,0))
                        
                        if (physicsHelper.physics.velocity.tangential.len > 20) then
                            self.unit.setEngineCommand('torque', vec3(0,0,0), {flatOrientation:composeControlledStabAngularAcceleration():unpack()} ) 
                        else
                            self.unit.setEngineCommand('torque', vec3(0,0,0),  {angularAcceleration:unpack()})
                        end
                        Nav:setEngineCommand('horizontal', forward, nullvector)
                        if (Pitch == 0) then
                            self.unit.setEngineCommand('altitude', {verticalPosition:composeVerticalAcceleration():unpack()} ,  vec3(0,0,0))                    
                        end
                    end

                end


                if telemeter.getDistance() ~= -1 then
                     for i=1,gear_size do gear[i].activate() end
                else
                     for i=1,gear_size do gear[i].deactivate() end
                end 

                 if ( Nav:getBrakeInput() == 1) then
                   self.unit.setEngineCommand('brake', {vec3(-2 * Nav:getBrakeInput() * physicsHelper.physics.velocity.world.vector):unpack()}, nullvector)
                end
                
                
        actionStart:
            args: [gear]
            lua: |
                    if VerticalMode == 0 then
                       VerticalMode = 1
                    else
                        VerticalMode = 0
                    end

 
        actionStart:
            args: [left]
            lua: |
                  Turn = Turn - 1
                  Nav:decrease(Nav.roll)
        actionStop:
            args: [left]
            lua: |
                  Turn = Turn + 1
                  Nav:increase(Nav.roll)
        actionStart:
            args: [right]
            lua: |
                  Turn = Turn + 1
                  Nav:increase(Nav.roll)
        actionStop:
            args: [right]
            lua: |
                  Turn = Turn - 1
                  Nav:decrease(Nav.roll)
        actionStart:
            args: [brake]
            lua: Nav:increase(Nav.brake)
        actionStop:
            args: [brake]
            lua: Nav:decrease(Nav.brake)
        actionStart:
            args: [up]
            lua: verticalPosition:increaseAltitude()
        actionStart:
            args: [down]
            lua: verticalPosition:decreaseAltitude()
        actionLoop:
            args: [speedup]
            lua: Nav.thrustManager:updateCommand(0.1)
        actionLoop:
            args: [speeddown]
            lua: Nav.thrustManager:updateCommand(-0.1)
        actionStart:
            args: [yawright]
            lua: Nav:decrease(Nav.yaw)
        actionStop:
            args: [yawright]
            lua: Nav:increase(Nav.yaw)
        actionStart:
            args: [yawleft]
            lua: Nav:increase(Nav.yaw)
        actionStop:
            args: [yawleft]
            lua: Nav:decrease(Nav.yaw)
        actionStart:
            args: [forward]
            lua: Pitch = -0.2
        actionStop:
            args: [forward]
            lua: Pitch = 0
        actionStart:
            args: [backward]
            lua: Pitch = 0.2
        actionStop:
            args: [backward]
            lua: Pitch = 0
        actionStart:
            args: [option1]
            lua: | 
                  autoPilot:setStatus(0)
        actionStart:
            args: [option2]
            lua: |
                  physicsHelper:SetOnPlanetDestination(startingPosition)
                  autoPilot:setStatus(1)
                

 