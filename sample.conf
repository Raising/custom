##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: MinerAssistant

slots:
    core:
        class: CoreUnit
    container:
        class: FuelContainer
        select: all

handlers:
    unit:
        start:
            lua: |

                mat4 = require('cpml/mat4')

                CurrentPoint = 0
                CurrentDigit = 0
                Coordinates = {
                    P1 = {d1="_",d2="_",d3="_",distance = 0, position = vec3(0,0,0), set = false, arrow = core.spawnArrowSticker(0,0,0,"down") },
                    P2 = {d1="_",d2="_",d3="_",distance = 0, position = vec3(0,0,0), set = false, arrow = core.spawnArrowSticker(0,0,0,"down") },
                    P3 = {d1="_",d2="_",d3="_",distance = 0, position = vec3(0,0,0), set = false, arrow = core.spawnArrowSticker(0,0,0,"down") },
                    P4 = {d1="_",d2="_",d3="_",distance = 0, position = vec3(0,0,0), set = false, arrow = core.spawnArrowSticker(0,0,0,"down") }
                }
                OreCoordinate = vec3(0,0,0)


                function SetCurrentDigit( number)
                    local PointObj = Coordinates["P" .. CurrentPoint]; 
                    PointObj["d" .. CurrentDigit] = number
                    CurrentDigit = (CurrentDigit % 3) + 1
                    if (CurrentDigit == 1){
                        PointObj.set = true
                        PointObj.distance = PointObj.d1 * 100 + PointObj.d2*10 + PointObj.d3 
                    }

                    if (CurrentDigit == 1 and CurrentPoint == 4) then
                        OreCoordinate = CalculateOrePosition()
                    end
                end 

                function CalculateOrePosition()
                    local planeP1P2 = CalcualtePlaneFromSpheres(Coordinates.P1,Coordinates.P2)
                    local planeP2P3 = CalcualtePlaneFromSpheres(Coordinates.P2,Coordinates.P3) 
                    local planeP3P4 = CalcualtePlaneFromSpheres(Coordinates.P3,Coordinates.P4) 

                    local lineP12P23 = CalculateLineFromPlanes(planeP1P2,planeP2P3) 
                    local lineP23P34 =  CalculateLineFromPlanes(planeP2P3,planeP3P4)


                    local w = lineP12P23.somePoint - planeP3P4.V0
                    local s = (-1 * planeP3P4.normal):dot(w) /   planeP3P4.normal:dot(lineP12P23.direction)
                    local PointINtersectionlineP12P23ToPlaneP3P4 = lineP12P23.somePoint + (lineP12P23.direction * s)

                    return PointINtersectionlineP12P23ToPlaneP3P4;
                end

                function CalcualtePlaneFromSpheres(Pa,Pb )
                    local normal = Pb.position - Pa.position;
                    local distanceTocenterPointFromPa = (math.pow (Pb.distance,2) - math.pow (Pa.distance,2) + math.pow ((Pb.position - Pa.position):len,2)) / 2 
                    local centerPoint = Pa.position + distanceTocenterPointFromPa * normal; 
                    return {centerPoint = centerPoint, normal = normal, V0 =  centerPoint:project_on_plane(normal)}
                end

                function CalculateLineFromPlanes(Pla,Plb)
                    local direction = Pla.normal:cross(Plb.normal)

                    local Da = Pla.V0:dot(Pla.normal)
                    local Db = Plb.V0:dot(Plb.normal)
                    
                    local x = ((Pla.normal.y * Db ) - (Plb.normal.y * Da)) / (( Pla.normal.x *  Plb.normal.y ) - (Pla.normal.y *  Plb.normal.x ))
                    local y = ((Plb.normal.x * Da ) - (Pla.normal.x * Db)) / (( Pla.normal.x *  Plb.normal.y ) - (Pla.normal.y *  Plb.normal.x ))


                    local somePoint = vec3(x,y,0)

                    return {somePoint = somePoint,direction = direction}
                end

                function SetNextPoint()
                    CurrentPoint = (CurrentPoint%4) + 1
                    CurrentDigit = 1
                    
                    local position = vec3(unit.getMasterPlayerRelativePosition())
                    position = worldToLocalRotationMatrix() * {position.x,position.y,position.z,1}
                    position =  vec3(position[1],position[2],position[3])
                    Coordinates["P" .. CurrentPoint].position = position

                    core.moveSticker( Coordinates["P" .. CurrentPoint].arrow,position.x,position.y,position.z) 
                end 

                function worldToLocalRotationMatrix()
                    local up = vec3(core.getConstructWorldOrientationUp())
                    local forward = vec3(core.getConstructWorldOrientationForward())
                    local right = vec3(core.getConstructWorldOrientationRight())
                    
                    return mat4({right.x,forward.x,up.x,0,right.y,forward.y,up.y,0,right.z,forward.z,up.z,0,0,0,0,1})
                end

                function worldToLocalTraslationMatrix()
                    return  mat4():translate(-1 * vec3(self.core.getConstructWorldPos()))
                end

                function worldToLocal(worldPosition)
                    local shipPosition =  worldToLocalTraslationMatrix() * worldToLocalRotationMatrix() * {worldPosition.x,worldPosition.y,worldPosition.z,1}
                    return vec3(shipPosition[1],shipPosition[2],shipPosition[3])
                end

               
        stop:
            lua: |
       


    system:
        flush:
            lua: |
                    
        update:
            lua: |
                 system.setScreen(
                   [[ <div> P1 = ]] .. Coordinates.P1.d1 .. [[.]] .. Coordinates.P1.d2 .. [[.]] .. Coordinates.P1.d3 .. 
                   [[ meters  Position ==> ]] .. Coordinates.P1.position:__tostring() .. [[</div>]] ..
                   [[ <div> P2 = ]] .. Coordinates.P2.d1 .. [[.]] .. Coordinates.P2.d2 .. [[.]] .. Coordinates.P2.d3 .. 
                   [[ meters  Position ==> ]] .. Coordinates.P2.position:__tostring() .. [[</div>]] ..
                   [[ <div> P3 = ]] .. Coordinates.P3.d1 .. [[.]] .. Coordinates.P3.d2 .. [[.]] .. Coordinates.P3.d3 .. 
                   [[ meters  Position ==> ]] .. Coordinates.P3.position:__tostring() .. [[</div>]] ..
                   [[ <div> P4 = ]] .. Coordinates.P4.d1 .. [[.]] .. Coordinates.P4.d2 .. [[.]] .. Coordinates.P4.d3 .. 
                   [[ meters  Position ==> ]] .. Coordinates.P4.position:__tostring() .. [[</div>]]
                    )

        actionStart:
            args: [gear]
            lua: SetNextPoint()


        actionStart:
            args: [brake]
            lua: |
                    --reset
               
        actionStart:
            args: [option1]
            lua: SetCurrentDigit(1)
        actionStart:
            args: [option2]
            lua: SetCurrentDigit(2)
        actionStart:
            args: [option3]
            lua: SetCurrentDigit(3)
        actionStart:
            args: [option4]
            lua: SetCurrentDigit(4)
        actionStart:
            args: [option5]
            lua: SetCurrentDigit(5)
        actionStart:
            args: [option6]
            lua: SetCurrentDigit(6)
        actionStart:
            args: [option7]
            lua: SetCurrentDigit(7)
        actionStart:
            args: [option8]
            lua: SetCurrentDigit(8)
        actionStart:
            args: [option9]
            lua: SetCurrentDigit(9)
        actionStart:
            args: [antigravity]
            lua: SetCurrentDigit(0)                 